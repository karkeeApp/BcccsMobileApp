/// Generated by Flutter GetX Starter on 2021-09-08 23:45
import 'dart:ffi';
import 'dart:io';

import 'package:carkee/components/TextFieldPhungNoBorder.dart';
import 'package:carkee/components/network_api.dart';
import 'package:carkee/config/singleton.dart';
import 'package:carkee/config/strings.dart';
import 'package:carkee/controllers/controllers.dart';
import 'package:carkee/models/V2/ModelSecurityQuestionResult.dart';
import 'package:carkee/screen/start_loading.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:dio/dio.dart' as Dioo;
import 'package:image_picker/image_picker.dart';
import 'package:carkee/config/styles.dart';

import 'item_question_dynamic/item_question_dynamic_page.dart';

// extension FileExtention on FileSystemEntity{
//   String get name {
//     return this?.path?.split("/")?.last;
//   }
// }
class JoinClubV2Logic extends GetxController {
  var isLoadDoneData = false.obs;
  var listData = <ModelQuestion>[].obs; // dat l·∫πi cho d·ªÖ bi·∫øt
  var listAnswer = <ModelQuestion>[]; // dat l·∫πi cho d·ªÖ bi·∫øt
  // var listFile = <File>[]; // dat l·∫πi cho d·ªÖ bi·∫øt
  TextEditingController textController = TextEditingController();
  var club_code = TextEditingController();
  final ProfileController profileController = Get.find();
  // File file;
  // final picker = ImagePicker();

  var getListQuestionDone = false.obs;

  //Widget
  var listWidgetQuestion = <Widget>[].obs; // dat l·∫πi cho d·ªÖ bi·∫øt

  @override
  void onInit() {
    // TODO: implement onInit
    super.onInit();
  }

  @override
  void onReady() {
    // TODO: implement onReady
    super.onReady();
    // callAPIGetListQuesiton();
  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
  }

  callAPIJoin_Club() async {
    Session.shared.showLoading();
    print("start ");
    var formData = Dioo.FormData();
    for (var i = 0; i < listAnswer.length; i++) {
      var model = listAnswer[i];
      formData.fields.add(MapEntry('question_id[]', model.id.toString()));
      if (model.isFileUpload == 0) {
        formData.fields.add(MapEntry('answers[]', model.answer));
      } else {
        formData.files.add(MapEntry(
            'answers[]',
            await Dioo.MultipartFile.fromFile(model.file.path,
                filename: model.file.name)));
      }
    }
    formData.fields.add(MapEntry('club_code', club_code.text));

    print(' ‚úÖ b·∫°n g·ª≠i l√™n data l√† ${formData.fields}');
    Map<String, dynamic> jsonQuery = {"access-token": await Session.shared.getToken()};
    var network = NetworkAPI(
        endpoint: 'member/club-registration',
        formData: formData,
        jsonQuery: jsonQuery);
    var jsonBody = await network.callAPIPOST();
    Session.shared.hideLoading();
    if (jsonBody["code"] == 100) {
      print(
          "‚úÖ g·ªçi API member/request-new-club success $jsonBody l√†m g√¨ ti·∫øp theo ch∆∞a bi·∫øt");
      var msg = jsonBody["message"];
      if (msg != null || msg != "") {
        Session.shared.showAlertPopupOneButtonWithCallback(
            title: msg,
            callback: () {
              Session.shared.changeRootViewToDashBoard();
              print("‚úÖ ƒë√£ nh·∫•n OK ");
            });
      }
      logger.d(jsonBody);
    } else {
      print("‚úÖ g·ªçi API member/request-new-club FALSE ${jsonBody}");
      var msg = jsonBody["message"];
      if (msg != null || msg != "") {
        Session.shared.showAlertPopupOneButtonWithCallback(
            title: msg,
            callback: () {
              print("‚úÖ ƒë√£ nh·∫•n OK ");
            });
      }
    }
  }

  callAPIGetListQuesiton() async {
    print("üçÖ start callAPIGetListQuesiton");
    var endpoint = 'admin/account/questions-by-club-code';
    Map<String, dynamic> jsonQuery = {
      "access-token": await Session.shared.getToken(),
      'code': club_code.text,
    };
    var network = NetworkAPI(endpoint: endpoint, jsonQuery: jsonQuery);
    var jsonBody = await network.callAPI(
      method: "GET",
    );
    if (jsonBody != null) {
      if (jsonBody["code"] == 100) {
        print(" => CALL API $endpoint OK");
        var results = ModelSecurityQuestionResult.fromJson(jsonBody);
        listData.value = results.data;
        print("‚úÖ ƒë√£ g·ªçi xong API $endpoint, c√≥ ${listData.length} item");
        print("‚úÖ get list widget question ");
        listAnswer = results.data;
        getListQuestion();
        isLoadDoneData.value = true;
      } else {
        print(
            " => CALL API $endpoint FALSE: $jsonBody with jsonQuery $jsonQuery");
        Session.shared.showAlertPopupOneButtonWithCallback(
            content: jsonBody["message"] ?? "");
      }
    }
  }

  getListQuestion() {
    for (var i = 0; i < listData.length; i++) {
      var item = itemQuestion(i);
      listWidgetQuestion.add(item);
    }
    print("‚úÖ xong listWidgetQuestion c√≥ ${listWidgetQuestion.length}");
    listWidgetQuestion.refresh();
  }

  //c·ª© m·ªói question s·∫Ω c√≥ 1 Widget
  Widget itemQuestion(int index) {
    return ItemQuestionDynamicPage(
      key: Key('$index'),
      model: listData[index],
      callbackString: (answer) {
        listAnswer[index].answer = answer;
      },
      callbackFile: (file) {
        // listAnswer.add(file);
        listAnswer[index].file = file;
      },
    );
  }
}
